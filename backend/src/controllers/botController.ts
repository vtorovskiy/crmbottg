// backend/src/controllers/botController.ts
import { Request, Response } from 'express'
import crypto from 'crypto'
import { botService } from '@/services/botService'
import { botMessageHandler } from '@/services/botMessageHandler'
import { logger } from '@/utils/logger'
import type { TelegramUpdate } from '@/types/telegram'

export class BotController {

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Telegram
   */
  async handleWebhook(req: Request, res: Response): Promise<void> {
    try {
      const signature = req.headers['x-telegram-bot-api-secret-token'] as string
      const body = JSON.stringify(req.body)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å webhook (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      if (process.env.TELEGRAM_WEBHOOK_SECRET && signature) {
        const isValid = this.verifyWebhookSignature(body, signature)
        if (!isValid) {
          logger.warn('Invalid webhook signature', {
            signature: signature.substring(0, 10) + '...',
            ip: req.ip,
            userAgent: req.get('User-Agent')
          })
          res.status(403).json({ success: false, message: 'Invalid signature' })
          return
        }
      }

      const update: TelegramUpdate = req.body

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É update
      if (!update || typeof update.update_id !== 'number') {
        logger.warn('Invalid update structure', { update })
        res.status(400).json({ success: false, message: 'Invalid update structure' })
        return
      }

      logger.debug('Received Telegram update', {
        updateId: update.update_id,
        hasMessage: !!update.message,
        hasCallbackQuery: !!update.callback_query
      })

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      this.processUpdate(update).catch(error => {
        logger.error('Error processing Telegram update', error, {
          updateId: update.update_id
        })
      })

      // –ë—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—á–∞–µ–º Telegram —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ update
      res.status(200).json({ success: true })

    } catch (error) {
      logger.error('Webhook processing error', error, {
        body: req.body,
        headers: req.headers
      })
      res.status(500).json({ success: false, message: 'Internal server error' })
    }
  }

  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Telegram update
   */
  private async processUpdate(update: TelegramUpdate): Promise<void> {
    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      if (update.message) {
        await botMessageHandler.handleMessage(update.message)
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback query (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
      if (update.callback_query) {
        await botMessageHandler.handleCallbackQuery(update.callback_query)
      }

      // –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
      if (update.edited_message) {
        logger.debug('Received edited message, ignoring', {
          updateId: update.update_id
        })
      }

    } catch (error) {
      logger.error('Error in processUpdate', error, {
        updateId: update.update_id,
        hasMessage: !!update.message,
        hasCallbackQuery: !!update.callback_query
      })
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook
   */
  private verifyWebhookSignature(body: string, signature: string): boolean {
    try {
      const secret = process.env.TELEGRAM_WEBHOOK_SECRET!
      const hash = crypto
        .createHmac('sha256', secret)
        .update(body)
        .digest('hex')

      return crypto.timingSafeEqual(
        Buffer.from(signature),
        Buffer.from(hash)
      )
    } catch (error) {
      logger.error('Error verifying webhook signature', error)
      return false
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ CRM)
   */
  async notifyOrderCreated(req: Request, res: Response): Promise<void> {
    try {
      const {
        telegram_id,
        order_number,
        product_title,
        size,
        amount,
        delivery_type,
        manager_name,
        manager_username
      } = req.body

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!telegram_id || !order_number || !product_title) {
        res.status(400).json({
          success: false,
          message: 'Missing required fields: telegram_id, order_number, product_title'
        })
        return
      }

      const text = `
‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!

üìã –ó–∞–∫–∞–∑: ${order_number}
üì¶ ${product_title}
üìè –†–∞–∑–º–µ—Ä: ${size || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí∞ –°—É–º–º–∞: ${amount?.toLocaleString('ru-RU')}‚ÇΩ
üöö –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: ${delivery_type === 'express' ? '–≠–∫—Å–ø—Ä–µ—Å—Å' : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è'}

${manager_name ? `üìû –í–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä: ${manager_name}` : ''}
${manager_username ? `üí¨ –°–≤—è–∑—å: @${manager_username}` : ''}

–ú—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞!
–í—Ä–µ–º—è –≤—ã–∫—É–ø–∞: 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
      `

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }],
          ...(manager_username ? [[{ text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º', url: `https://t.me/${manager_username}` }]] : [])
        ]
      }

      await botService.sendMessage(telegram_id, text, { reply_markup: keyboard })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å —Å CRM –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.updateOrderCrmLink(order_number, req.body)

      logger.info('Order creation notification sent', {
        telegram_id,
        order_number,
        amount
      })

      res.json({
        success: true,
        message: 'Notification sent successfully'
      })

    } catch (error) {
      logger.error('Error sending order creation notification', error)
      res.status(500).json({
        success: false,
        message: 'Failed to send notification'
      })
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  async notifyStatusChange(req: Request, res: Response): Promise<void> {
    try {
      const {
        telegram_id,
        order_number,
        old_status,
        new_status,
        track_number
      } = req.body

      if (!telegram_id || !order_number || !new_status) {
        res.status(400).json({
          success: false,
          message: 'Missing required fields: telegram_id, order_number, new_status'
        })
        return
      }

      let text = ''
      let keyboard: any = {
        inline_keyboard: [
          [{ text: 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }]
        ]
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      switch (new_status) {
        case 'paid':
          text = `
üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!

üìã –ó–∞–∫–∞–∑: ${order_number}
üí∞ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ

–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–∫—É–ø —Ç–æ–≤–∞—Ä–∞ —Å POIZON.
–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.
          `
          break

        case 'shipped':
          text = `
üöö –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!

üìã –ó–∞–∫–∞–∑: ${order_number}
${track_number ? `üì¶ –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${track_number}` : ''}

–ü–æ—Å—ã–ª–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –°–î–≠–ö.
–û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: 3-7 –¥–Ω–µ–π.

${track_number ? `üîç –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É:\nhttps://www.cdek.ru/track?order=${track_number}` : ''}
          `

          if (track_number) {
            keyboard.inline_keyboard.unshift([
              { text: 'üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –≤ –°–î–≠–ö', url: `https://www.cdek.ru/track?order=${track_number}` }
            ])
          }
          break

        case 'delivered':
          // –î–ª—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
          await this.notifyOrderCompleted(req, res)
          return

        default:
          text = `
üìä –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω

üìã –ó–∞–∫–∞–∑: ${order_number}
üìà –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${this.getStatusText(new_status)}
          `
          break
      }

      await botService.sendMessage(telegram_id, text, { reply_markup: keyboard })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
      if (track_number) {
        await botService.updateOrderStatus(order_number, new_status, track_number)
      } else {
        await botService.updateOrderStatus(order_number, new_status)
      }

      logger.info('Status change notification sent', {
        telegram_id,
        order_number,
        old_status,
        new_status,
        track_number
      })

      res.json({
        success: true,
        message: 'Status notification sent successfully'
      })

    } catch (error) {
      logger.error('Error sending status change notification', error)
      res.status(500).json({
        success: false,
        message: 'Failed to send status notification'
      })
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
   */
  async notifyOrderCompleted(req: Request, res: Response): Promise<void> {
    try {
      const {
        telegram_id,
        order_number,
        product_title,
        amount,
        review_url
      } = req.body

      if (!telegram_id || !order_number) {
        res.status(400).json({
          success: false,
          message: 'Missing required fields: telegram_id, order_number'
        })
        return
      }

      const text = `
üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!

üìã –ó–∞–∫–∞–∑: ${order_number}
${product_title ? `üì¶ ${product_title}` : ''}
${amount ? `üí∞ ${amount.toLocaleString('ru-RU')}‚ÇΩ` : ''}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ SQUARE! üôè

–ú—ã –±—É–¥–µ–º –æ—á–µ–Ω—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤:
‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ
üí¨ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏

–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!
      `

      const reviewsUrl = review_url || botService.getSetting('reviews_url', '')

      const keyboard = {
        inline_keyboard: [
          ...(reviewsUrl ? [[{ text: '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', url: reviewsUrl }]] : []),
          [{ text: 'üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å –µ—â–µ', callback_data: 'calculate_cost' }],
          [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏', callback_data: 'call_operator' }]
        ]
      }

      await botService.sendMessage(telegram_id, text, { reply_markup: keyboard })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      await botService.updateOrderStatus(order_number, 'delivered')

      logger.info('Order completion notification sent', {
        telegram_id,
        order_number,
        amount
      })

      res.json({
        success: true,
        message: 'Completion notification sent successfully'
      })

    } catch (error) {
      logger.error('Error sending order completion notification', error)
      res.status(500).json({
        success: false,
        message: 'Failed to send completion notification'
      })
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
   */
  async getBotStats(req: Request, res: Response): Promise<void> {
    try {
      const stats = await botService.getStats()

      res.json({
        success: true,
        data: stats
      })

    } catch (error) {
      logger.error('Error getting bot stats', error)
      res.status(500).json({
        success: false,
        message: 'Failed to get bot statistics'
      })
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
   */
  async testConnection(req: Request, res: Response): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram API
      const botInfo = await this.getBotInfo()

      if (botInfo) {
        logger.info('Bot connection test successful', {
          botUsername: botInfo.username,
          botId: botInfo.id
        })

        res.json({
          success: true,
          message: 'Bot connection is working',
          data: {
            bot_id: botInfo.id,
            bot_username: botInfo.username,
            can_join_groups: botInfo.can_join_groups,
            can_read_all_group_messages: botInfo.can_read_all_group_messages,
            supports_inline_queries: botInfo.supports_inline_queries
          }
        })
      } else {
        res.status(503).json({
          success: false,
          message: 'Bot connection test failed'
        })
      }

    } catch (error) {
      logger.error('Bot connection test failed', error)
      res.status(500).json({
        success: false,
        message: 'Internal server error during connection test'
      })
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
   */
  async setWebhook(req: Request, res: Response): Promise<void> {
    try {
      const { url, secret_token } = req.body

      if (!url) {
        res.status(400).json({
          success: false,
          message: 'Webhook URL is required'
        })
        return
      }

      const result = await this.setupWebhook(url, secret_token)

      if (result.success) {
        logger.info('Webhook set successfully', { url, hasSecret: !!secret_token })
        res.json({
          success: true,
          message: 'Webhook set successfully',
          data: result
        })
      } else {
        res.status(400).json({
          success: false,
          message: 'Failed to set webhook',
          error: result.description
        })
      }

    } catch (error) {
      logger.error('Error setting webhook', error)
      res.status(500).json({
        success: false,
        message: 'Failed to set webhook'
      })
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
   */
  async getWebhookInfo(req: Request, res: Response): Promise<void> {
    try {
      const webhookInfo = await this.getWebhookStatus()

      res.json({
        success: true,
        data: webhookInfo
      })

    } catch (error) {
      logger.error('Error getting webhook info', error)
      res.status(500).json({
        success: false,
        message: 'Failed to get webhook info'
      })
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
   */
  async sendMessage(req: Request, res: Response): Promise<void> {
    try {
      const { telegram_id, message, reply_markup } = req.body

      if (!telegram_id || !message) {
        res.status(400).json({
          success: false,
          message: 'telegram_id and message are required'
        })
        return
      }

      const result = await botService.sendMessage(telegram_id, message, { reply_markup })

      logger.info('Message sent via API', {
        telegram_id,
        message_id: result.message_id
      })

      res.json({
        success: true,
        message: 'Message sent successfully',
        data: {
          message_id: result.message_id,
          chat_id: result.chat.id
        }
      })

    } catch (error) {
      logger.error('Error sending message via API', error)
      res.status(500).json({
        success: false,
        message: 'Failed to send message'
      })
    }
  }

  // =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===============

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ –∑–∞–∫–∞–∑–∞ —Å CRM
   */
  private async updateOrderCrmLink(orderNumber: string, crmData: any): Promise<void> {
    try {
      await botService.updateOrderStatus(
        orderNumber,
        'confirmed',
        undefined // track_number
      )

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å CRM ID —Å–¥–µ–ª–∫–∏
      // await db.query(
      //   'UPDATE bot_orders SET crm_deal_id = $1 WHERE order_number = $2',
      //   [crmData.deal_id, orderNumber]
      // )

    } catch (error) {
      logger.error('Error updating order CRM link', error)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
   */
  private async getBotInfo(): Promise<any> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getMe`)
      const data = await response.json()

      if ((data as any).ok) {
        return (data as any).result
      } else {
        logger.error('Failed to get bot info', data)
        return null
      }
    } catch (error) {
      logger.error('Error getting bot info', error)
      return null
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
   */
  private async setupWebhook(url: string, secretToken?: string): Promise<any> {
    try {
      const payload: any = {
        url,
        allowed_updates: ['message', 'callback_query']
      }

      if (secretToken) {
        payload.secret_token = secretToken
      }

      const response = await fetch(
        `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/setWebhook`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        }
      )

      const data = await response.json()
      return data
    } catch (error) {
      logger.error('Error setting up webhook', error)
      return { success: false, description: 'Network error' }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ webhook
   */
  private async getWebhookStatus(): Promise<any> {
    try {
      const response = await fetch(
        `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/getWebhookInfo`
      )
      const data = await response.json()

      if ((data as any).ok) {
        return (data as any).result
      } else {
        return { error: (data as any).description }
      }
    } catch (error) {
      logger.error('Error getting webhook status', error)
      return { error: 'Network error' }
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
   */
  private getStatusText(status: string): string {
    const statusTexts: Record<string, string> = {
      'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'paid': '–û–ø–ª–∞—á–µ–Ω',
      'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    return statusTexts[status] || status
  }
}

export const botController = new BotController()
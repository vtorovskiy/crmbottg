// backend/src/services/botMessageHandler.ts
import { botService } from './botService'
import { poizonService } from './poizonService'
import { logger } from '@/utils/logger'
import type { TelegramMessage, TelegramCallbackQuery } from '@/types/telegram'
import { db } from '@/config/database'

interface UserSession {
  step: string
  data: Record<string, any>
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ production –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis)
const userSessions = new Map<string, UserSession>()

// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
const CATEGORIES = {
  'shoes': { name: 'üëü –û–±—É–≤—å', emoji: 'üëü' },
  'boots': { name: 'ü•æ –ë–æ—Ç–∏–Ω–∫–∏', emoji: 'ü•æ' },
  'tshirts': { name: 'üëï –§—É—Ç–±–æ–ª–∫–∏', emoji: 'üëï' },
  'jackets': { name: 'üß• –ö—É—Ä—Ç–∫–∏', emoji: 'üß•' },
  'shorts': { name: 'ü©≥ –®–æ—Ä—Ç—ã', emoji: 'ü©≥' },
  'pants': { name: 'üëñ –®—Ç–∞–Ω—ã', emoji: 'üëñ' },
  'accessories': { name: 'üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', emoji: 'üéí' },
  'bags': { name: 'üëú –°—É–º–∫–∏', emoji: 'üëú' }
}

class BotMessageHandler {

  // =============== –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===============

  async handleMessage(message: TelegramMessage): Promise<void> {
    try {
      const user = await botService.findOrCreateUser(message.from!)
      const chatId = message.chat.id
      const text = message.text || ''

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await botService.logUserAction(user.id, 'message_received', {
        text: text.substring(0, 100),
        chat_id: chatId
      })

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
      if (text.startsWith('/')) {
        await this.handleCommand(chatId, text, user)
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const session = userSessions.get(user.telegram_id) || { step: 'menu', data: {} }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
      switch (session.step) {
        case 'waiting_url':
          await this.handleUrlInput(chatId, text, user, session)
          break

        case 'menu':
        default:
          await this.showMainMenu(chatId)
          break
      }

    } catch (error) {
      logger.error('Error handling bot message', error)
      await botService.sendMessage(message.chat.id,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      )
    }
  }

  // =============== –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK QUERY ===============

  async handleCallbackQuery(callbackQuery: TelegramCallbackQuery): Promise<void> {
    try {
      const user = await botService.findOrCreateUser(callbackQuery.from)
      const chatId = callbackQuery.message?.chat.id!
      const data = callbackQuery.data!

      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
      await botService.logUserAction(user.id, 'callback_query', { data })

      if (data === 'check_subscription') {
        await this.handleSubscriptionCheck(chatId, user)
      } else if (data === 'understood') {
        await this.showMainMenu(chatId)
      } else if (data === 'need_help') {
        await this.showPoizonInfo(chatId)
      } else if (data === 'calculate_cost') {
        await this.startCalculation(chatId, user)
      } else if (data === 'reviews') {
        await this.showReviews(chatId)
      } else if (data === 'what_is_poizon') {
        await this.showPoizonInfo(chatId)
      } else if (data === 'call_operator') {
        await this.callOperator(chatId, user)
      } else if (data === 'my_orders') {
        await this.showMyOrders(chatId, user)
      } else if (data === 'main_menu') {
        await this.showMainMenu(chatId)
      } else if (data === 'cancel') {
        await this.cancelOperation(chatId, user)
      } else if (data.startsWith('category_')) {
        await this.handleCategorySelection(chatId, data, user)
      } else if (data.startsWith('size_')) {
        await this.handleSizeSelection(chatId, data, user)
      } else if (data === 'order_standard') {
        await this.handleOrderConfirmation(chatId, user, 'standard')
      } else if (data === 'order_express') {
        await this.handleOrderConfirmation(chatId, user, 'express')
      } else if (data === 'recalculate') {
        await this.startCalculation(chatId, user)
      }

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
      await this.answerCallbackQuery(callbackQuery.id)

    } catch (error) {
      logger.error('Error handling callback query', error)
      await this.answerCallbackQuery(callbackQuery.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    }
  }

  // =============== –ö–û–ú–ê–ù–î–´ ===============

  async handleCommand(chatId: number, command: string, user: any): Promise<void> {
    const cmd = command.split(' ')[0].toLowerCase()

    try {
      switch (cmd) {
        case '/start':
          await this.handleStart(chatId, user)
          break

        case '/help':
          await this.handleHelpCommand(chatId)
          break

        case '/admin_settings':
          await this.handleAdminSettings(chatId, user)
          break

        case '/set_rate':
          await this.handleSetRate(chatId, command, user)
          break

        case '/stats':
          await this.handleStatsCommand(chatId, user)
          break

        default:
          await this.handleUnknownCommand(chatId, command)
          break
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
      await botService.logUserAction(user.id, 'command_executed', {
        command: cmd,
        full_command: command
      })

    } catch (error) {
      await this.handleError(chatId, error as Error, `command_${cmd}`)
    }
  }

  // =============== –ö–û–ú–ê–ù–î–ê /START ===============

  async handleStart(chatId: number, user: any): Promise<void> {
    const channelUsername = botService.getSetting('channel_username', 'erauqss')
    const isSubscribed = await botService.checkSubscription(user.telegram_id, channelUsername)

    if (!isSubscribed) {
      await this.showSubscriptionRequired(chatId, channelUsername)
    } else {
      await this.showWelcomeMessage(chatId)
    }
  }

  async showSubscriptionRequired(chatId: number, channelUsername: string): Promise<void> {
    const text = `
–ü—Ä–∏–≤–µ—Ç! üëã

–≠—Ç–æ –±–æ—Ç SQUARE, –º—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –¥–æ—Å—Ç–∞–≤–∫–æ–π —Å POIZON.

–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª @${channelUsername}
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url: `https://t.me/${channelUsername}` }],
        [{ text: '‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data: 'check_subscription' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })
  }

  async handleSubscriptionCheck(chatId: number, user: any): Promise<void> {
    const channelUsername = botService.getSetting('channel_username', 'erauqss')
    const isSubscribed = await botService.checkSubscription(user.telegram_id, channelUsername)

    if (isSubscribed) {
      await this.showWelcomeMessage(chatId)
    } else {
      await botService.sendMessage(chatId,
        '‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      )
    }
  }

  async showWelcomeMessage(chatId: number): Promise<void> {
    const text = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SQUARE!

–ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –∑–∞–∫–∞–∑–∞—Ç—å –ª—é–±—ã–µ —Ç–æ–≤–∞—Ä—ã —Å POIZON:
‚Ä¢ üîç –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
‚Ä¢ üöö –ù–∞–¥–µ–∂–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚Ä¢ üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ üí¨ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –Ø –ø–æ–Ω—è–ª, –∫–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ', callback_data: 'understood' }],
        [{ text: '‚ùì –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ', callback_data: 'need_help' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })
  }

  // =============== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===============

  async showMainMenu(chatId: number): Promise<void> {
    const text = `
üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é SQUARE

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'calculate_cost' }],
        [{ text: '‚≠ê –û—Ç–∑—ã–≤—ã', callback_data: 'reviews' }],
        [{ text: '‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ POIZON?', callback_data: 'what_is_poizon' }],
        [{ text: 'üë®‚Äçüíº –ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', callback_data: 'call_operator' }],
        [{ text: 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'my_orders' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })
  }

  // =============== –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò ===============

  async startCalculation(chatId: number, user: any): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç API
    const canUseApi = await botService.checkApiLimit(user.id, 'extract-spu')
    if (!canUseApi) {
      const limit = botService.getSetting('api_limit_per_user', '50')
      await botService.sendMessage(chatId,
        `‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –≤ ${limit} —Ä–∞—Å—á–µ—Ç–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.`
      )
      return
    }

    const text = `
üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å POIZON

–ö–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É:
[–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç GIF]

–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:
„ÄêÂæóÁâ©„ÄëÂæóÁâ©er-0Y3B7W6DÂèëÁé∞‰∏Ä‰ª∂Â•ΩÁâ©Ôºå 1 CZ1111 
√•l7KoaBg√• https://dw4.co/t/A/1sHU86GGg Nike Air Max 97
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userSessions.set(user.telegram_id, {
      step: 'waiting_url',
      data: {}
    })
  }

  async handleUrlInput(chatId: number, text: string, user: any, session: UserSession): Promise<void> {
    try {
      // –ü–∞—Ä—Å–∏–º URL –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
      const urlRegex = /https?:\/\/[^\s\u4e00-\u9fff]+/gi
      const urls = text.match(urlRegex)

      if (!urls || urls.length === 0) {
        await botService.sendMessage(chatId,
          '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.'
        )
        return
      }

      const url = urls[0]
      await botService.sendMessage(chatId, '‚è≥ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...')

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ API
      await botService.incrementApiUsage(user.id, 'extract-spu')

      // –ü–æ–ª—É—á–∞–µ–º SPU ID
      const spuId = await poizonService.extractSpu(url)

      if (!spuId) {
        await botService.sendMessage(chatId,
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.'
        )
        return
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ API
      await botService.incrementApiUsage(user.id, 'get-product-data')

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
      const productData = await poizonService.getProductData(spuId)

      if (!productData) {
        await botService.sendMessage(chatId,
          '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ.'
        )
        return
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏—é
      session.data = {
        url,
        spuId,
        productData: { product: productData }
      }
      session.step = 'category_selection'
      userSessions.set(user.telegram_id, session)

      await this.showCategorySelection(chatId)

    } catch (error) {
      logger.error('Error processing POIZON URL', error)
      await botService.sendMessage(chatId,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      )
    }
  }

  async showCategorySelection(chatId: number): Promise<void> {
    const text = 'üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:'

    const keyboard = {
      inline_keyboard: [
        [
          { text: CATEGORIES.shoes.name, callback_data: 'category_shoes' },
          { text: CATEGORIES.boots.name, callback_data: 'category_boots' }
        ],
        [
          { text: CATEGORIES.tshirts.name, callback_data: 'category_tshirts' },
          { text: CATEGORIES.jackets.name, callback_data: 'category_jackets' }
        ],
        [
          { text: CATEGORIES.shorts.name, callback_data: 'category_shorts' },
          { text: CATEGORIES.pants.name, callback_data: 'category_pants' }
        ],
        [
          { text: CATEGORIES.accessories.name, callback_data: 'category_accessories' },
          { text: CATEGORIES.bags.name, callback_data: 'category_bags' }
        ],
        [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })
  }

  async handleCategorySelection(chatId: number, callbackData: string, user: any): Promise<void> {
    const category = callbackData.replace('category_', '')
    const session = userSessions.get(user.telegram_id)

    if (!session || !session.data.productData) {
      await this.showMainMenu(chatId)
      return
    }

    session.data.selectedCategory = category
    session.step = 'size_selection'
    userSessions.set(user.telegram_id, session)

    await this.showProductWithSizes(chatId, session.data)
  }

  async showProductWithSizes(chatId: number, sessionData: any): Promise<void> {
    const { productData } = sessionData
    const product = productData.product

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
    if (product.image && product.image.src) {
      const imageUrl = product.image.src.startsWith('//')
        ? `https:${product.image.src}`
        : product.image.src

      const caption = `üì¶ ${product.title}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:`

      await botService.sendPhoto(chatId, imageUrl, { caption })
    }

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
    const variants = product.variants || []
    const availableVariants = variants.filter((v: any) => v.available)

    if (availableVariants.length === 0) {
      await botService.sendMessage(chatId,
        '‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
      )
      return
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 4 –≤ —Ä—è–¥
    const sizeButtons: any[][] = []
    for (let i = 0; i < availableVariants.length; i += 4) {
      const row = availableVariants.slice(i, i + 4).map((variant: any) => ({
        text: variant.option2 || variant.options?.find((o: any) => o.name === 'Size')?.value || 'N/A',
        callback_data: `size_${variant.id}`
      }))
      sizeButtons.push(row)
    }

    sizeButtons.push([
      { text: 'üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data: 'calculate_cost' },
      { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel' }
    ])

    const keyboard = { inline_keyboard: sizeButtons }
    await botService.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:', { reply_markup: keyboard })
  }

  async handleSizeSelection(chatId: number, callbackData: string, user: any): Promise<void> {
    const variantId = callbackData.replace('size_', '')
    const session = userSessions.get(user.telegram_id)

    if (!session || !session.data.productData) {
      await this.showMainMenu(chatId)
      return
    }

    const product = session.data.productData.product
    const selectedVariant = product.variants.find((v: any) => v.id === variantId)

    if (!selectedVariant) {
      await botService.sendMessage(chatId, '‚ùå –†–∞–∑–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
      return
    }

    session.data.selectedVariant = selectedVariant
    userSessions.set(user.telegram_id, session)

    await this.showPriceCalculation(chatId, session.data, user)
  }

  async showPriceCalculation(chatId: number, sessionData: any, user: any): Promise<void> {
    const { productData, selectedCategory, selectedVariant } = sessionData
    const product = productData.product

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    const yuanRate = parseFloat(botService.getSetting('yuan_rate', '13.20'))
    const cdekPrice = parseFloat(botService.getSetting('cdek_price', '500'))
    const markup = parseFloat(botService.getSetting(`markup_${selectedCategory}`, '500'))
    const shipping = parseFloat(botService.getSetting(`shipping_${selectedCategory}`, '600'))
    const expressExtra = parseFloat(botService.getSetting(`express_extra_${selectedCategory}`, '400'))

    // –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö
    const priceYuan = parseFloat(selectedVariant.price)

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const productRubPrice = priceYuan * yuanRate
    const standardTotal = Math.round(productRubPrice + markup + shipping + cdekPrice)
    const expressTotal = Math.round(standardTotal + expressExtra)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç
    sessionData.calculation = {
      priceYuan,
      standardTotal,
      expressTotal
    }

    const size = selectedVariant.option2 || selectedVariant.options?.find((o: any) => o.name === 'Size')?.value || 'N/A'

    const text = `
üí∞ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

üì¶ ${product.title}
üìè –†–∞–∑–º–µ—Ä: ${size}

üöö –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –î–û–°–¢–ê–í–ö–ê: ${standardTotal.toLocaleString('ru-RU')}‚ÇΩ
‚ö° –≠–ö–°–ü–†–ï–°–° –î–û–°–¢–ê–í–ö–ê: ${expressTotal.toLocaleString('ru-RU')}‚ÇΩ
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', callback_data: 'order_standard' }],
        [{ text: 'üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ç–æ–≤–∞—Ä', callback_data: 'recalculate' }],
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –≤ –±–∞–∑—É
    await botService.saveCalculation({
      user_id: user.id,
      spu_id: sessionData.spuId,
      product_title: product.title,
      category: selectedCategory,
      size,
      original_price: priceYuan,
      calculated_price_standard: standardTotal,
      calculated_price_express: expressTotal,
      product_data: productData
    })
  }

  // =============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===============

  private getStatusEmoji(status: string): string {
    const statusEmojis: Record<string, string> = {
      'pending': 'üü°',
      'confirmed': 'üîµ',
      'paid': 'üü¢',
      'shipped': 'üì¶',
      'delivered': '‚úÖ',
      'cancelled': '‚ùå'
    }
    return statusEmojis[status] || '‚ö™'
  }

  private getStatusText(status: string): string {
    const statusTexts: Record<string, string> = {
      'pending': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
      'confirmed': '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      'paid': '–û–ø–ª–∞—á–µ–Ω',
      'shipped': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
      'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
    }
    return statusTexts[status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
  }

  private async answerCallbackQuery(queryId: string, text?: string): Promise<void> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          callback_query_id: queryId,
          text: text || '',
          show_alert: false
        })
      })

      if (!response.ok) {
        logger.warn('Failed to answer callback query', {
          queryId: queryId.substring(0, 10),
          status: response.status
        })
      }
    } catch (error) {
      logger.warn('Error answering callback query', { queryId: queryId.substring(0, 10), error })
    }
  }

  // =============== –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ö–ê–ó–û–í ===============

  async handleOrderConfirmation(chatId: number, user: any, deliveryType: string): Promise<void> {
    const session = userSessions.get(user.telegram_id)

    if (!session || !session.data.calculation) {
      await this.showMainMenu(chatId)
      return
    }

    const { productData, selectedVariant, selectedCategory, calculation } = session.data
    const product = productData.product
    const size = selectedVariant.option2 || selectedVariant.options?.find((o: any) => o.name === 'Size')?.value || 'N/A'
    const amount = deliveryType === 'express' ? calculation.expressTotal : calculation.standardTotal

    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ
    const order = await botService.createOrder({
      user_id: user.id,
      product_title: product.title,
      product_size: size,
      category: selectedCategory,
      status: 'pending',
      amount,
      delivery_type: deliveryType
    })

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const text = `
üìù –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è...

–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!
üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: ${order.order_number}

–°–µ–π—á–∞—Å —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    await this.notifyAdminsAboutNewOrder(order, user, session.data)

    // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    userSessions.delete(user.telegram_id)
  }

  async notifyAdminsAboutNewOrder(order: any, user: any, sessionData: any): Promise<void> {
    const adminIds = [
      botService.getSetting('admin_chat_1'),
      botService.getSetting('admin_chat_2'),
      botService.getSetting('admin_chat_3')
    ].filter(id => id && id.trim())

    const { productData, selectedVariant } = sessionData
    const size = selectedVariant.option2 || selectedVariant.options?.find((o: any) => o.name === 'Size')?.value || 'N/A'
    const username = user.username ? `@${user.username}` : user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

    const text = `
üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó ${order.order_number}

üë§ –ö–ª–∏–µ–Ω—Ç: ${username} (ID: ${user.telegram_id})
üì¶ –¢–æ–≤–∞—Ä: ${order.product_title}
üìè –†–∞–∑–º–µ—Ä: ${size}
üí∞ –°—É–º–º–∞: ${order.amount.toLocaleString('ru-RU')}‚ÇΩ (${order.delivery_type === 'express' ? '—ç–∫—Å–ø—Ä–µ—Å—Å' : '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'})

üîó –°—Å—ã–ª–∫–∞: ${sessionData.url}
    `

    for (const adminId of adminIds) {
      try {
        await botService.sendMessage(adminId, text)
      } catch (error) {
        logger.error('Failed to notify admin', { adminId, error })
      }
    }
  }

  // =============== –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –†–ê–ó–î–ï–õ–´ ===============

  async showReviews(chatId: number): Promise<void> {
    const reviewsUrl = botService.getSetting('reviews_url', 'https://your-reviews-site.com')

    const text = `
‚≠ê –û—Ç–∑—ã–≤—ã –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤

–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ:
üåê ${reviewsUrl}

–£ –Ω–∞—Å –±–æ–ª–µ–µ 300,000 –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })
  }

  async showPoizonInfo(chatId: number): Promise<void> {
    const links = [
      botService.getSetting('poizon_info_url_1', 'https://link1.com'),
      botService.getSetting('poizon_info_url_2', 'https://link2.com'),
      botService.getSetting('poizon_info_url_3', 'https://link3.com')
    ]

    const text = `
‚ùì –ß—Ç–æ —Ç–∞–∫–æ–µ POIZON?

POIZON (ÂæóÁâ©) - –∫—Ä—É–ø–Ω–µ–π—à–∞—è –∫–∏—Ç–∞–π—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ –æ–¥–µ–∂–¥—ã.

–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
üìñ ${links[0]} - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
üé• ${links[1]} - –í–∏–¥–µ–æ –æ–±–∑–æ—Ä
üì± ${links[2]} - –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })
  }

  async callOperator(chatId: number, user: any): Promise<void> {
    const text = `
üë®‚Äçüíº –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É...

–°–µ–π—á–∞—Å —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä.
–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 15 –º–∏–Ω—É—Ç.
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const adminIds = [
      botService.getSetting('admin_chat_1'),
      botService.getSetting('admin_chat_2'),
      botService.getSetting('admin_chat_3')
    ].filter(id => id && id.trim())

    const username = user.username ? `@${user.username}` : user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    const now = new Date()
    const time = now.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })

    const adminText = `
üÜò –í–´–ó–û–í –û–ü–ï–†–ê–¢–û–†–ê

üë§ –ö–ª–∏–µ–Ω—Ç: ${username} (ID: ${user.telegram_id})
‚è∞ –í—Ä–µ–º—è: ${time}
üí¨ –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
    `

    for (const adminId of adminIds) {
      try {
        await botService.sendMessage(adminId, adminText)
      } catch (error) {
        logger.error('Failed to notify admin about operator call', { adminId, error })
      }
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await botService.logUserAction(user.id, 'operator_called', {
      timestamp: now.toISOString()
    })
  }

  async showMyOrders(chatId: number, user: any): Promise<void> {
    const orders = await botService.getOrdersByUser(user.id)

    if (orders.length === 0) {
      const text = `
üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.
–ù–∞—á–Ω–∏—Ç–µ —Å —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞!
      `

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'calculate_cost' }],
          [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }

      await botService.sendMessage(chatId, text, { reply_markup: keyboard })
      return
    }

    let text = 'üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n'

    orders.slice(0, 5).forEach(order => {
      const statusEmoji = this.getStatusEmoji(order.status)
      const date = new Date((order as any).created_at || new Date()).toLocaleDateString('ru-RU')

      text += `${statusEmoji} ${order.order_number} –æ—Ç ${date}\n`
      text += `${order.product_title}, —Ä–∞–∑–º–µ—Ä ${order.product_size}\n`
      text += `üí∞ ${order.amount.toLocaleString('ru-RU')}‚ÇΩ | üìä ${this.getStatusText(order.status)}\n`

      if (order.track_number) {
        text += `üöö –¢—Ä–µ–∫: ${order.track_number}\n`
      } else {
        text += `üöö –¢—Ä–µ–∫: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n`
      }
      text += '\n'
    })

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã', callback_data: 'my_orders' }],
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })
  }

  async cancelOperation(chatId: number, user: any): Promise<void> {
    userSessions.delete(user.telegram_id)
    await this.showMainMenu(chatId)
  }

  // =============== –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò ===============

  async handleAdminSettings(chatId: number, user: any): Promise<void> {
    const adminIds = [
      botService.getSetting('admin_chat_1'),
      botService.getSetting('admin_chat_2'),
      botService.getSetting('admin_chat_3')
    ]

    if (!adminIds.includes(user.telegram_id)) {
      await botService.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
      return
    }

    const stats = await botService.getStats()
    const yuanRate = botService.getSetting('yuan_rate', '13.20')

    const text = `
‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
üí± –ö—É—Ä—Å ¬•: ${yuanRate}‚ÇΩ
üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.activeUsers || 0}
üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers || 0}
üßÆ –†–∞—Å—á–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.todayApiRequests || 0}

–ö–æ–º–∞–Ω–¥—ã:
/set_rate [—á–∏—Å–ª–æ] - –∏–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å
/stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    `

    await botService.sendMessage(chatId, text)
  }

  async handleSetRate(chatId: number, command: string, user: any): Promise<void> {
    const adminIds = [
      botService.getSetting('admin_chat_1'),
      botService.getSetting('admin_chat_2'),
      botService.getSetting('admin_chat_3')
    ]

    if (!adminIds.includes(user.telegram_id)) {
      await botService.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
      return
    }

    const parts = command.split(' ')
    if (parts.length !== 2) {
      await botService.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_rate 13.50')
      return
    }

    const newRate = parseFloat(parts[1])
    if (isNaN(newRate) || newRate <= 0) {
      await botService.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞.')
      return
    }

    await botService.updateSetting('yuan_rate', newRate.toString(), user.id)
    await botService.sendMessage(chatId, `‚úÖ –ö—É—Ä—Å –æ–±–Ω–æ–≤–ª–µ–Ω: 1¬• = ${newRate}‚ÇΩ`)

    logger.info('Yuan rate updated by admin', {
      adminId: user.telegram_id,
      newRate,
      oldRate: botService.getSetting('yuan_rate')
    })
  }

  async handleStatsCommand(chatId: number, user: any): Promise<void> {
    const adminIds = [
      botService.getSetting('admin_chat_1'),
      botService.getSetting('admin_chat_2'),
      botService.getSetting('admin_chat_3')
    ]

    if (!adminIds.includes(user.telegram_id)) {
      await botService.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
      return
    }

    const stats = await botService.getStats()
    const settings = {
      yuanRate: botService.getSetting('yuan_rate', '13.20'),
      apiLimit: botService.getSetting('api_limit_per_user', '50'),
      cdekPrice: botService.getSetting('cdek_price', '500')
    }

    const text = `
üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SQUARE Bot

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalUsers || 0}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): ${stats.activeUsers || 0}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.newUsersToday || 0}

üßÆ –†–∞—Å—á–µ—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalCalculations || 0}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${stats.todayCalculations || 0}
‚Ä¢ API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.todayApiRequests || 0}

üì¶ –ó–∞–∫–∞–∑—ã:
‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalOrders || 0}
‚Ä¢ Pending: ${stats.pendingOrders || 0}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.completedOrders || 0}

üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ –ö—É—Ä—Å ¬•: ${settings.yuanRate}‚ÇΩ
‚Ä¢ –õ–∏–º–∏—Ç API: ${settings.apiLimit}/–¥–µ–Ω—å
‚Ä¢ –°–î–≠–ö: ${settings.cdekPrice}‚ÇΩ

üìà –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:
${stats.popularCategories?.map((cat: any, i: number) => 
  `${i + 1}. ${cat.category}: ${cat.count} —Ä–∞—Å—á–µ—Ç–æ–≤`
).join('\n') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
    `

    await botService.sendMessage(chatId, text)
  }

  // =============== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ===============

  async handleUnknownCommand(chatId: number, command: string): Promise<void> {
    const text = `
‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
/admin_settings - –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
/set_rate [—á–∏—Å–ª–æ] - –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å —é–∞–Ω—è
/stats - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })
  }

  async handleHelpCommand(chatId: number): Promise<void> {
    const text = `
üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é SQUARE Bot

üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üßÆ –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ —Å POIZON
‚Ä¢ üì¶ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ üí¨ –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏

üìù –ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å POIZON
3. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —Ä–∞–∑–º–µ—Ä
4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
5. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑

üîó –ö–∞–∫ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É —Å POIZON:
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Ç–æ–≤–∞—Ä –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ POIZON
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é —Å—Ç—Ä–æ–∫—É –±–æ—Ç—É

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?
–ù–∞–∂–º–∏—Ç–µ "–ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', callback_data: 'calculate_cost' }],
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }

    await botService.sendMessage(chatId, text, { reply_markup: keyboard })
  }

  // =============== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===============

  async handleError(chatId: number, error: Error, context: string): Promise<void> {
    logger.error(`Bot error in ${context}`, error)

    const text = `
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

–ú—ã —É–∂–µ –∑–Ω–∞–µ–º –æ –ø—Ä–æ–±–ª–µ–º–µ –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.
    `

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üë®‚Äçüíº –ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', callback_data: 'call_operator' }],
        [{ text: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    }

    try {
      await botService.sendMessage(chatId, text, { reply_markup: keyboard })
    } catch (sendError) {
      logger.error('Failed to send error message', sendError)
    }
  }

  // =============== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===============

  async initialize(): Promise<void> {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
      await botService.loadSettings()

      logger.info('Bot message handler initialized successfully')
    } catch (error) {
      logger.error('Failed to initialize bot message handler', error)
      throw error
    }
  }

  // =============== –°–ï–°–°–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===============

  getSession(telegramId: string): UserSession {
    return userSessions.get(telegramId) || { step: 'menu', data: {} }
  }

  setSession(telegramId: string, session: UserSession): void {
    userSessions.set(telegramId, session)
  }

  clearSession(telegramId: string): void {
    userSessions.delete(telegramId)
  }

  // =============== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ===============

  async broadcastMessage(message: string, targetType: 'all' | 'active' | 'recent' = 'active'): Promise<{
    sent: number
    failed: number
  }> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      let userQuery = 'SELECT telegram_id FROM bot_users WHERE 1=1'

      if (targetType === 'active') {
        userQuery += ' AND last_activity > NOW() - INTERVAL \'7 days\''
      } else if (targetType === 'recent') {
        userQuery += ' AND registration_date > NOW() - INTERVAL \'30 days\''
      }

      const result = await db.query(userQuery)
      const users = result.rows

      let sent = 0
      let failed = 0

      for (const user of users) {
        try {
          await botService.sendMessage(user.telegram_id, message)
          sent++

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 100))
        } catch (error) {
          failed++
          logger.warn('Failed to send broadcast message', {
            telegramId: user.telegram_id,
            error
          })
        }
      }

      logger.info('Broadcast completed', {
        targetType,
        totalUsers: users.length,
        sent,
        failed
      })

      return { sent, failed }
    } catch (error) {
      logger.error('Error in broadcast message', error)
      return { sent: 0, failed: 0 }
    }
  }

  async exportUsers(format: 'csv' | 'json' = 'csv'): Promise<string> {
    try {
      const query = `
        SELECT 
          telegram_id,
          username,
          first_name,
          last_name,
          registration_date,
          last_activity,
          total_calculations,
          total_orders,
          is_subscribed
        FROM bot_users
        ORDER BY registration_date DESC
      `

      const result = await db.query(query)
      const users = result.rows

      if (format === 'json') {
        return JSON.stringify(users, null, 2)
      }

      // CSV format
      const headers = [
        'telegram_id',
        'username',
        'first_name',
        'last_name',
        'registration_date',
        'last_activity',
        'total_calculations',
        'total_orders',
        'is_subscribed'
      ].join(',')

      const csvRows = users.map(user =>
        Object.values(user).map(value =>
          typeof value === 'string' && value.includes(',')
            ? `"${value}"`
            : value
        ).join(',')
      )

      return [headers, ...csvRows].join('\n')
    } catch (error) {
      logger.error('Error exporting users', error)
      throw error
    }
  }

  async getDetailedUserStats(telegramId: string): Promise<any> {
    try {
      const userQuery = `
        SELECT 
          bu.*,
          COUNT(pc.id) as total_calculations,
          COUNT(bo.id) as total_orders,
          COALESCE(SUM(bo.amount), 0) as total_order_amount
        FROM bot_users bu
        LEFT JOIN product_calculations pc ON bu.id = pc.user_id
        LEFT JOIN bot_orders bo ON bu.id = bo.user_id
        WHERE bu.telegram_id = $1
        GROUP BY bu.id
      `

      const ordersQuery = `
        SELECT bo.*, pc.category
        FROM bot_orders bo
        LEFT JOIN product_calculations pc ON bo.calculation_id = pc.id
        WHERE bo.user_id = (SELECT id FROM bot_users WHERE telegram_id = $1)
        ORDER BY bo.created_at DESC
        LIMIT 10
      `

      const apiUsageQuery = `
        SELECT 
          api_endpoint,
          SUM(request_count) as total_requests,
          MAX(request_date) as last_request_date
        FROM api_usage
        WHERE user_id = (SELECT id FROM bot_users WHERE telegram_id = $1)
        GROUP BY api_endpoint
      `

      const [userResult, ordersResult, apiResult] = await Promise.all([
        db.query(userQuery, [telegramId]),
        db.query(ordersQuery, [telegramId]),
        db.query(apiUsageQuery, [telegramId])
      ])

      if (userResult.rows.length === 0) {
        return null
      }

      return {
        user: userResult.rows[0],
        recentOrders: ordersResult.rows,
        apiUsage: apiResult.rows
      }
    } catch (error) {
      logger.error('Error getting detailed user stats', error)
      return null
    }
  }
}

export const botMessageHandler = new BotMessageHandler()
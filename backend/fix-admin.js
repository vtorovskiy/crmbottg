const bcrypt = require('bcrypt');
const { Pool } = require('pg');

const pool = new Pool({
  host: 'localhost',
  port: 5432,
  database: 'telegram_crm',
  user: 'postgres',
  password: 'postgres'
});

async function fixAdmin() {
  try {
    const password = 'admin123456';
    const saltRounds = 12;
    
    console.log('üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è –ø–∞—Ä–æ–ª—è:', password);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–µ—à
    const passwordHash = await bcrypt.hash(password, saltRounds);
    console.log('‚úÖ –ù–æ–≤—ã–π —Ö–µ—à —Å–æ–∑–¥–∞–Ω:', passwordHash);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–µ—à —Ä–∞–±–æ—Ç–∞–µ—Ç
    const isValid = await bcrypt.compare(password, passwordHash);
    console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞:', isValid ? '‚úÖ –†–ê–ë–û–¢–ê–ï–¢' : '‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
    
    if (!isValid) {
      throw new Error('–°–æ–∑–¥–∞–Ω–Ω—ã–π —Ö–µ—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    const result = await pool.query(
      'UPDATE users SET password_hash = $1 WHERE email = $2 RETURNING id, email, role',
      [passwordHash, 'admin@example.com']
    );
    
    if (result.rows.length === 0) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º
      const createResult = await pool.query(
        'INSERT INTO users (email, password_hash, role) VALUES ($1, $2, $3) RETURNING id, email, role',
        ['admin@example.com', passwordHash, 'admin']
      );
      console.log('üë§ Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', createResult.rows[0]);
    } else {
      console.log('üë§ Admin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', result.rows[0]);
    }
    
    console.log('\nüéâ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—Ö–æ–¥–∏—Ç—å —Å:');
    console.log('üìß Email: admin@example.com');
    console.log('üîë Password: admin123456');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await pool.end();
  }
}

fixAdmin();

// frontend/src/store/authStore.ts
import { create } from 'zustand'
import { persist } from 'zustand/middleware'
import toast from 'react-hot-toast'
import { authApi } from '@/services/api'
import type { AuthState, User } from '@/types'

export const useAuthStore = create<AuthState>()(
  persist(
    (set, get) => ({
      user: null,
      isAuthenticated: false,
      isLoading: true,

      login: async (email: string, password: string) => {
        try {
          console.log('üîê Attempting login...', { email })

          const response = await authApi.login({ email, password })

          if (!response.success) {
            throw new Error(response.message || 'Login failed')
          }

          const { user, token } = response.data

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ localStorage
          localStorage.setItem('authToken', token)

          set({
            user,
            isAuthenticated: true,
            isLoading: false
          })

          console.log('‚úÖ Login successful', { user: user.email })
          toast.success(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.email}!`)

        } catch (error: any) {
          console.error('‚ùå Login error:', error)

          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          set({
            user: null,
            isAuthenticated: false,
            isLoading: false
          })

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
          let errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É'

          if (error.response?.data?.message) {
            errorMessage = error.response.data.message
          } else if (error.message) {
            errorMessage = error.message
          } else if (error.response?.status === 401) {
            errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
          } else if (error.response?.status >= 500) {
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          } else if (error.code === 'NETWORK_ERROR') {
            errorMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
          }

          toast.error(errorMessage)
          throw error
        }
      },

      logout: () => {
        try {
          // –í—ã–∑—ã–≤–∞–µ–º API logout (–º–æ–∂–µ—Ç –±—ã—Ç—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º)
          authApi.logout().catch(error => {
            console.warn('Logout API call failed:', error)
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–π logout –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç
          })
        } catch (error) {
          console.warn('Logout API call failed:', error)
        }

        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        localStorage.removeItem('authToken')

        set({
          user: null,
          isAuthenticated: false,
          isLoading: false
        })

        console.log('üëã User logged out')
        toast.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
      },

      checkAuth: async () => {
        try {
          const token = localStorage.getItem('authToken')

          if (!token) {
            console.log('üîç No auth token found')
            set({
              user: null,
              isAuthenticated: false,
              isLoading: false
            })
            return
          }

          console.log('üîç Checking auth with existing token...')

          const response = await authApi.getProfile()

          if (!response.success) {
            throw new Error('Profile fetch failed')
          }

          const user = response.data

          set({
            user,
            isAuthenticated: true,
            isLoading: false
          })

          console.log('‚úÖ Auth check successful', { user: user.email })

        } catch (error: any) {
          console.warn('‚ùå Auth check failed:', error)

          // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
          localStorage.removeItem('authToken')

          set({
            user: null,
            isAuthenticated: false,
            isLoading: false
          })

          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º toast –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ª–æ–≥–∏–Ω
        }
      },

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      getCurrentUser: () => {
        return get().user
      },

      isLoggedIn: () => {
        return get().isAuthenticated && !!get().user
      },

      hasRole: (role: string) => {
        const user = get().user
        return user?.role === role
      },

      updateUser: (updates: Partial<User>) => {
        const currentUser = get().user
        if (currentUser) {
          set({
            user: { ...currentUser, ...updates }
          })
        }
      },
    }),
    {
      name: 'auth-storage',
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ loading —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      partialize: (state) => ({
        user: state.user,
        isAuthenticated: state.isAuthenticated
      }),
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      onRehydrateStorage: () => (state) => {
        if (state) {
          // –ü–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ localStorage –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
          state.isLoading = true
        }
      },
    }
  )
)
// frontend/src/services/api.ts
import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios'
import toast from 'react-hot-toast'
import type {
  ApiResponse,
  PaginatedResponse,
  User,
  Contact,
  Deal,
  Message,
  ContactField,
  DealStage,
  DashboardStats,
  LoginForm
} from '@/types'

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api'

class ApiService {
  private api: AxiosInstance

  constructor() {
    this.api = axios.create({
      baseURL: API_BASE_URL,
      timeout: 30000,
      headers: {
        'Content-Type': 'application/json',
      },
    })

    // Request interceptor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    this.api.interceptors.request.use(
      (config) => {
        const token = localStorage.getItem('authToken')
        if (token) {
          config.headers.Authorization = `Bearer ${token}`
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ dev —Ä–µ–∂–∏–º–µ
        if (import.meta.env.DEV) {
          console.log(`üöÄ API Request: ${config.method?.toUpperCase()} ${config.url}`, {
            data: config.data,
            headers: config.headers,
          })
        }

        return config
      },
      (error) => {
        console.error('‚ùå Request error:', error)
        return Promise.reject(error)
      }
    )

    // Response interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    this.api.interceptors.response.use(
      (response: AxiosResponse) => {
        // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ dev —Ä–µ–∂–∏–º–µ
        if (import.meta.env.DEV) {
          console.log(`‚úÖ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, {
            status: response.status,
            data: response.data,
          })
        }
        return response
      },
      (error: AxiosError) => {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        console.error(`‚ùå API Error: ${error.config?.method?.toUpperCase()} ${error.config?.url}`, {
          status: error.response?.status,
          data: error.response?.data,
          message: error.message,
        })

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∞—Ç—É—Å –∫–æ–¥–æ–≤
        if (error.response?.status === 401) {
          // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
          localStorage.removeItem('authToken')

          // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è —É–∂–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞
          if (window.location.pathname !== '/login') {
            window.location.href = '/login'
            toast.error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.')
          }
        } else if (error.response?.status === 403) {
          toast.error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞')
        } else if (error.response?.status === 404) {
          toast.error('–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        } else if (error.response?.status >= 500) {
          toast.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        } else if (error.code === 'NETWORK_ERROR' || error.message.includes('Network Error')) {
          toast.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
        }

        return Promise.reject(error)
      }
    )
  }

  // Generic –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  private async get<T>(url: string, params?: any): Promise<ApiResponse<T>> {
    const response: AxiosResponse<ApiResponse<T>> = await this.api.get(url, { params })
    return response.data
  }

  private async post<T>(url: string, data?: any): Promise<ApiResponse<T>> {
    const response: AxiosResponse<ApiResponse<T>> = await this.api.post(url, data)
    return response.data
  }

  private async put<T>(url: string, data?: any): Promise<ApiResponse<T>> {
    const response: AxiosResponse<ApiResponse<T>> = await this.api.put(url, data)
    return response.data
  }

  private async delete<T>(url: string): Promise<ApiResponse<T>> {
    const response: AxiosResponse<ApiResponse<T>> = await this.api.delete(url)
    return response.data
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  private async upload<T>(url: string, formData: FormData): Promise<ApiResponse<T>> {
    const response: AxiosResponse<ApiResponse<T>> = await this.api.post(url, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    })
    return response.data
  }

  // ===== AUTH API =====
  auth = {
    login: async (data: LoginForm): Promise<ApiResponse<{ user: User; token: string }>> => {
      try {
        return await this.post<{ user: User; token: string }>('/auth/login', data)
      } catch (error: any) {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ª–æ–≥–∏–Ω–∞
        const message = error.response?.data?.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É'
        throw new Error(message)
      }
    },

    getProfile: async (): Promise<ApiResponse<User>> => {
      return await this.get<User>('/auth/profile')
    },

    logout: async (): Promise<ApiResponse<void>> => {
      return await this.post<void>('/auth/logout')
    },
  }

  // ===== CONTACTS API =====
  contacts = {
    getAll: async (params?: {
      page?: number
      limit?: number
      search?: string
      telegramUsername?: string
    }): Promise<ApiResponse<PaginatedResponse<Contact>>> => {
      return await this.get<PaginatedResponse<Contact>>('/contacts', params)
    },

    getById: async (id: number): Promise<ApiResponse<Contact>> => {
      return await this.get<Contact>(`/contacts/${id}`)
    },

    create: async (data: {
      telegramId?: string
      telegramUsername?: string
      customFields: Record<string, any>
    }): Promise<ApiResponse<Contact>> => {
      return await this.post<Contact>('/contacts', data)
    },

    update: async (id: number, data: {
      telegramId?: string
      telegramUsername?: string
      customFields: Record<string, any>
    }): Promise<ApiResponse<Contact>> => {
      return await this.put<Contact>(`/contacts/${id}`, data)
    },

    delete: async (id: number): Promise<ApiResponse<void>> => {
      return await this.delete<void>(`/contacts/${id}`)
    },

    search: async (query: string): Promise<ApiResponse<Contact[]>> => {
      return await this.get<Contact[]>(`/contacts/search?q=${encodeURIComponent(query)}`)
    },
  }

  // ===== CONTACT FIELDS API =====
  contactFields = {
    getAll: async (): Promise<ApiResponse<ContactField[]>> => {
      return await this.get<ContactField[]>('/contact-fields')
    },

    create: async (data: {
      name: string
      type: string
      required?: boolean
      position?: number
      options?: string[]
    }): Promise<ApiResponse<ContactField>> => {
      return await this.post<ContactField>('/contact-fields', data)
    },

    update: async (id: number, data: {
      name?: string
      type?: string
      required?: boolean
      position?: number
      options?: string[]
    }): Promise<ApiResponse<ContactField>> => {
      return await this.put<ContactField>(`/contact-fields/${id}`, data)
    },

    delete: async (id: number): Promise<ApiResponse<void>> => {
      return await this.delete<void>(`/contact-fields/${id}`)
    },

    reorder: async (fields: Array<{ id: number; position: number }>): Promise<ApiResponse<void>> => {
      return await this.put<void>('/contact-fields/reorder', { fields })
    },
  }

  // ===== DEALS API =====
  deals = {
    getAll: async (params?: {
      page?: number
      limit?: number
      search?: string
      stageId?: number
      contactId?: number
    }): Promise<ApiResponse<PaginatedResponse<Deal>>> => {
      return await this.get<PaginatedResponse<Deal>>('/deals', params)
    },

    getById: async (id: number): Promise<ApiResponse<Deal>> => {
      return await this.get<Deal>(`/deals/${id}`)
    },

    create: async (data: {
      contactId: number
      title: string
      amount: number
      stageId: number
      probability?: number
      products?: string[]
      plannedCloseDate?: string
    }): Promise<ApiResponse<Deal>> => {
      return await this.post<Deal>('/deals', data)
    },

    update: async (id: number, data: {
      title?: string
      amount?: number
      stageId?: number
      probability?: number
      products?: string[]
      plannedCloseDate?: string
    }): Promise<ApiResponse<Deal>> => {
      return await this.put<Deal>(`/deals/${id}`, data)
    },

    delete: async (id: number): Promise<ApiResponse<void>> => {
      return await this.delete<void>(`/deals/${id}`)
    },

    updateStage: async (id: number, stageId: number): Promise<ApiResponse<Deal>> => {
      return await this.put<Deal>(`/deals/${id}/stage`, { stageId })
    },
  }

  // ===== DEAL STAGES API =====
  dealStages = {
    getAll: async (): Promise<ApiResponse<DealStage[]>> => {
      return await this.get<DealStage[]>('/deal-stages')
    },

    create: async (data: {
      name: string
      position?: number
      autoTransitionRules?: Record<string, any>
    }): Promise<ApiResponse<DealStage>> => {
      return await this.post<DealStage>('/deal-stages', data)
    },

    update: async (id: number, data: {
      name?: string
      position?: number
      autoTransitionRules?: Record<string, any>
    }): Promise<ApiResponse<DealStage>> => {
      return await this.put<DealStage>(`/deal-stages/${id}`, data)
    },

    delete: async (id: number): Promise<ApiResponse<void>> => {
      return await this.delete<void>(`/deal-stages/${id}`)
    },

    reorder: async (stages: Array<{ id: number; position: number }>): Promise<ApiResponse<void>> => {
      return await this.put<void>('/deal-stages/reorder', { stages })
    },
  }

  // ===== MESSAGES API =====
  messages = {
    getByContact: async (contactId: number, params?: {
      page?: number
      limit?: number
      search?: string
    }): Promise<ApiResponse<Message[]>> => {
      return await this.get<Message[]>(`/messages/${contactId}`, params)
    },

    send: async (data: {
      contactId: number
      content: string
      type?: string
    }): Promise<ApiResponse<Message>> => {
      return await this.post<Message>('/messages/send', data)
    },

    delete: async (id: number): Promise<ApiResponse<void>> => {
      return await this.delete<void>(`/messages/${id}`)
    },

    markAsRead: async (contactId: number): Promise<ApiResponse<void>> => {
      return await this.put<void>(`/messages/${contactId}/read`)
    },
  }

  // ===== FILES API =====
  files = {
    upload: async (file: File, contactId?: number): Promise<ApiResponse<any>> => {
      const formData = new FormData()
      formData.append('file', file)
      if (contactId) {
        formData.append('contactId', contactId.toString())
      }
      return await this.upload<any>('/files/upload', formData)
    },

    delete: async (id: number): Promise<ApiResponse<void>> => {
      return await this.delete<void>(`/files/${id}`)
    },

    download: async (id: number): Promise<Blob> => {
      const response = await this.api.get(`/files/${id}/download`, { responseType: 'blob' })
      return response.data
    },
  }

  // ===== STATS API =====
  stats = {
    getDashboard: async (): Promise<ApiResponse<DashboardStats>> => {
      return await this.get<DashboardStats>('/stats/dashboard')
    },

    getContactsStats: async (period: string = 'month'): Promise<ApiResponse<any>> => {
      return await this.get<any>(`/stats/contacts?period=${period}`)
    },

    getDealsStats: async (period: string = 'month'): Promise<ApiResponse<any>> => {
      return await this.get<any>(`/stats/deals?period=${period}`)
    },
  }

  // ===== SETTINGS API =====
  settings = {
    getTelegramConfig: async (): Promise<ApiResponse<any>> => {
      return await this.get<any>('/settings/telegram')
    },

    updateTelegramConfig: async (data: {
      botToken?: string
      webhookUrl?: string
      webhookSecret?: string
    }): Promise<ApiResponse<any>> => {
      return await this.put<any>('/settings/telegram', data)
    },

    testTelegramConnection: async (): Promise<ApiResponse<any>> => {
      return await this.post<any>('/settings/telegram/test')
    },
  }

  // ===== UTILITY METHODS =====

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
  async healthCheck(): Promise<boolean> {
    try {
      const response = await this.api.get('/health')
      return response.status === 200
    } catch (error) {
      console.error('Health check failed:', error)
      return false
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL API
  getBaseURL(): string {
    return API_BASE_URL
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ axios instance (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
  getAxiosInstance(): AxiosInstance {
    return this.api
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API —Å–µ—Ä–≤–∏—Å–∞
export const api = new ApiService()

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ API –º–æ–¥—É–ª–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export const authApi = api.auth
export const contactsApi = api.contacts
export const contactFieldsApi = api.contactFields
export const dealsApi = api.deals
export const dealStagesApi = api.dealStages
export const messagesApi = api.messages
export const filesApi = api.files
export const statsApi = api.stats
export const settingsApi = api.settings

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç API –∫–∞–∫ default
export default api